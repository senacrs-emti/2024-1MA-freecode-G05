"use strict";(self.webpackChunksketchfab=self.webpackChunksketchfab||[]).push([[1111],{ZXTF:n=>{n.exports="(function webpackUniversalModuleDefinition(root, factory) {\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = factory();\n  else if(typeof define === 'function' && define.amd)\n    define([], factory);\n  else {\n    var a = factory();\n    for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n  }\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      exports: {},\n/******/      id: moduleId,\n/******/      loaded: false\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.loaded = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"\";\n\n/******/  // Load entry module and return exports\n/******/  return __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n  'use strict';\n\n  var decompressor = __webpack_require__( 1 );\n\n  /*jshint worker: true */\n\n  self.onmessage = function ( event ) {\n      var input = event.data;\n      var result = decompressor.decompress( input.buffer );\n\n      var img = new Uint8Array( result.img.buffer );\n      var width = result.width;\n      var height = result.height;\n\n      if ( input.swizzle ) {\n          var nbComponents = input.nbComponents || 3;\n          var nbPixel = width * height * 4;\n          for ( var i = 0, j = 0; i < nbPixel; i += 4, j += nbComponents ) {\n              var r = img[ i ];\n              var a = img[ i + 3 ];\n\n              var x = ( r / 255.0 ) * 2.0 - 1.0;\n              var y = ( a / 255.0 ) * 2.0 - 1.0;\n              var z = Math.sqrt( 1.0 - x * x - y * y );\n              z = Math.round( ( z * 0.5 + 0.5 ) * 255.0 );\n\n              img[ j ] = r;\n              img[ j + 1 ] = a;\n              img[ j + 2 ] = z;\n          }\n\n          img = img.subarray( 0, width * height * nbComponents );\n      }\n\n      postMessage( {\n          img: img,\n          width: width,\n          height: height,\n          uid: input.uid || 'uid'\n      }, [ img.buffer ] );\n  };\n\n  /*jshint worker: false */\n\n  module.exports = {\n      astcDecompressor: decompressor\n  };\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n  'use strict';\n\n  var precompute = __webpack_require__(2);\n  var cacheUnquantizeSimple = precompute.cacheUnquantizeSimple;\n  var cacheUnquantizeTrits = precompute.cacheUnquantizeTrits;\n  var cacheUnquantizeQuints = precompute.cacheUnquantizeQuints;\n  var cacheDecodeSimple = precompute.cacheDecodeSimple;\n  var cacheDecodeTrits = precompute.cacheDecodeTrits;\n  var cacheDecodeQuints = precompute.cacheDecodeQuints;\n\n  var bitUtils = __webpack_require__(3);\n  var popCount = bitUtils.popCount;\n  var readBits = bitUtils.readBits;\n  var writeBits = bitUtils.writeBits;\n  var extractBits = bitUtils.extractBits;\n  var replicateBits = bitUtils.replicateBits;\n  var bitTransferSigned = bitUtils.bitTransferSigned;\n  var reverseU8Array = bitUtils.reverseU8Array;\n\n\n  // Counting how many bits have been read for each block\n  // the value is reseted when computing a new block\n  var bitsReadCount = 0;\n  // Counting how many bits have been written\n  // useful when extracting color endpoint data\n  var bitsWrittenCount = 0;\n  // Counting how many bits have been read in the\n  // current block color data stream\n  var colorDataBitsRead = 0;\n  // Keeping track of the current index\n  // when calling the computeEndpoints routine\n  var decodedColorValuesIdx = 0;\n\n  // Contains the information\n  // of the current processed block\n  var CURRENT_BLOCK_INFO = {};\n  // Describes how trit/quint/bit is packed\n  // for a single encoded integer in the maxWeightQuintsTritsMapper\n  var TRIT_IDX = 0;\n  var QUINT_IDX = 1;\n  var BIT_IDX = 2;\n\n  // Maximum number of encoded values = 288\n  var resultDecodedStorage = new Uint16Array(288 * 6);\n  var subDecodedValue = new Array(8);\n  var classSelectorBitsArray = new Uint8Array(4);\n  var colorModeLSB = new Uint8Array(4);\n  var texelWeightData = new Uint8Array(16);\n  var colorEndpointData = new Uint8Array(16);\n  var endpoints = new Uint8Array(4 * 2 * 4);\n  var blockPixelsOutput = null;\n\n  /**\n   * Encodes a given value into its quints/trits/bits representation\n   * @param  {uint} val the value to encode\n   * @return {Object} contains the number of trits/quints/bits to encode the given value.\n   */\n  var getEncodedInteger = function(val) {\n    var encodedInt = {\n      trits: 0,\n      quints: 0,\n      bits: 0,\n      tritValue: 0,\n      quintValue: 0,\n      bitValue: 0\n    };\n    while (val > 0) {\n      var check = val + 1;\n\n      if (!(check & (check - 1))) {\n        encodedInt.bits = popCount(val);\n        return encodedInt;\n      }\n      if ((check % 3 === 0) && !(Math.floor(check / 3) & Math.floor((check / 3) - 1))) {\n        encodedInt.bits = popCount(Math.floor(check / 3 - 1));\n        encodedInt.trits = 1;\n        return encodedInt;\n      }\n      if ((check % 5 === 0) && !(Math.floor(check / 5) & Math.floor((check / 5) - 1))) {\n        encodedInt.bits = popCount(Math.floor(check / 5 - 1));\n        encodedInt.quints = 1;\n        return encodedInt;\n      }\n\n      val--;\n    }\n    return encodedInt;\n  };\n\n  var replicateBits0816Map = new Uint16Array(256);\n  for (var i = 0; i < 256; ++i)\n    replicateBits0816Map[i] = replicateBits(i, 8, 16);\n\n  var maxWeightQuintsTritsMapper = new Uint16Array(256 * 3);\n  var idx = 0;\n  for (var i = 0; i < 256; i++) {\n    var encodedInt = getEncodedInteger(i);\n    maxWeightQuintsTritsMapper[idx + TRIT_IDX] = encodedInt.trits;\n    maxWeightQuintsTritsMapper[idx + QUINT_IDX] = encodedInt.quints;\n    maxWeightQuintsTritsMapper[idx + BIT_IDX] = encodedInt.bits;\n\n    idx += 3;\n  }\n\n  /**\n   * Gives additional precision to RGB colors near gray\n   * pixel is changed in-place in the endpoints array\n   * Refers to ASTC specifications (Section 3.8)\n   * @param  {int} a the alpha channel component\n   * @param  {int} r the red channel component\n   * @param  {int} g the green channel component\n   * @param  {int} b the blue channel component\n   */\n  var blueContract = function(a, r, g, b) {\n    var idx = endpoints.currIdx;\n    endpoints[idx] = a;\n    endpoints[idx + 1] = (r + b) >> 1;\n    endpoints[idx + 2] = (g + b) >> 1;\n    endpoints[idx + 3] = b;\n  };\n\n  /**\n   * Expands a given seed\n   * Refers to ASTC specifications (Section 3.15)\n   * @param  {uint32} p the seed to expand\n   * @return {uint32} the processed expanded seed\n   */\n  var hash52 = function(p) {\n    p ^= (p >>> 15) >>> 0;\n    p -= (p << 17) >>> 0;\n    p += (p << 7) >>> 0;\n    p += (p << 4) >>> 0;\n    p ^= (p >>> 5) >>> 0;\n    p += (p << 16) >>> 0;\n    p ^= (p >>> 7) >>> 0;\n    p ^= (p >>> 3) >>> 0;\n    p ^= (p << 6) >>> 0;\n    p ^= (p >>> 17) >>> 0;\n\n    return p;\n  };\n\n  /**\n   * Computes the partition index for a given texel\n   * @param  {uint32} seed partition pattern index\n   * @param  {int} x texel x position withing the block\n   * @param  {int} y texel y position withing the block\n   * @param  {int} z texel z position withing the block\n   * @param  {uint} partitionCount maximum number of existing partitions\n   * @param  {bool} smallBlock set to true, number of texel in the block is less than 31\n   * @return {uint} the partition index of the given texel\n   */\n\n  var seedsPartitionTable = new Uint8Array(12);\n\n  var precomputeSelectPartition = function(seed, partitionCount) {\n\n    // Refers to ASTC specifications (Section 3.15)\n    seed += (partitionCount - 1) * 1024;\n    var seedUint32 = seed >>> 0;\n\n    var rnum = hash52(seedUint32);\n\n    // The seeds values should be saved in an uint8 variable\n    seedsPartitionTable[0] = rnum & 0xF;\n    seedsPartitionTable[1] = (rnum >> 4) & 0xF;\n    seedsPartitionTable[2] = (rnum >> 8) & 0xF;\n    seedsPartitionTable[3] = (rnum >> 12) & 0xF;\n    seedsPartitionTable[4] = (rnum >> 16) & 0xF;\n    seedsPartitionTable[5] = (rnum >> 20) & 0xF;\n    seedsPartitionTable[6] = (rnum >> 24) & 0xF;\n    seedsPartitionTable[7] = (rnum >> 28) & 0xF;\n    seedsPartitionTable[8] = (rnum >> 18) & 0xF;\n    seedsPartitionTable[9] = (rnum >> 22) & 0xF;\n    seedsPartitionTable[10] = (rnum >> 26) & 0xF;\n    seedsPartitionTable[11] = ((rnum >> 30) | (rnum << 2)) & 0xF;\n\n    seedsPartitionTable[0] *= seedsPartitionTable[0];\n    seedsPartitionTable[1] *= seedsPartitionTable[1];\n    seedsPartitionTable[2] *= seedsPartitionTable[2];\n    seedsPartitionTable[3] *= seedsPartitionTable[3];\n    seedsPartitionTable[4] *= seedsPartitionTable[4];\n    seedsPartitionTable[5] *= seedsPartitionTable[5];\n    seedsPartitionTable[6] *= seedsPartitionTable[6];\n    seedsPartitionTable[7] *= seedsPartitionTable[7];\n    seedsPartitionTable[8] *= seedsPartitionTable[8];\n    seedsPartitionTable[9] *= seedsPartitionTable[9];\n    seedsPartitionTable[10] *= seedsPartitionTable[10];\n    seedsPartitionTable[11] *= seedsPartitionTable[11];\n\n    var sh1 = 0;\n    var sh2 = 0;\n    var sh3 = 0;\n    if (seed & 1) {\n      sh1 = (seed & 2) ? 4 : 5;\n      sh2 = (partitionCount === 3) ? 6 : 5;\n    } else {\n      sh1 = (partitionCount === 3) ? 6 : 5;\n      sh2 = (seed & 2) ? 4 : 5;\n    }\n    sh3 = (seed & 0x10) ? sh1 : sh2;\n\n    seedsPartitionTable[0] >>= sh1;\n    seedsPartitionTable[1] >>= sh2;\n    seedsPartitionTable[2] >>= sh1;\n    seedsPartitionTable[3] >>= sh2;\n    seedsPartitionTable[4] >>= sh1;\n    seedsPartitionTable[5] >>= sh2;\n    seedsPartitionTable[6] >>= sh1;\n    seedsPartitionTable[7] >>= sh2;\n    seedsPartitionTable[8] >>= sh3;\n    seedsPartitionTable[9] >>= sh3;\n    seedsPartitionTable[10] >>= sh3;\n    seedsPartitionTable[11] >>= sh3;\n\n    return rnum;\n  };\n\n  var selectPartition = function(rnum, x, y, z, partitionCount, smallBlock) {\n    if (partitionCount === 1)\n      return 0;\n\n    if (smallBlock) {\n      x <<= 1;\n      y <<= 1;\n      z <<= 1;\n    }\n\n    var a = seedsPartitionTable[0] * x + seedsPartitionTable[1] * y + seedsPartitionTable[10] * z + (rnum >> 14);\n    var b = seedsPartitionTable[2] * x + seedsPartitionTable[3] * y + seedsPartitionTable[11] * z + (rnum >> 10);\n    var c = seedsPartitionTable[4] * x + seedsPartitionTable[5] * y + seedsPartitionTable[8] * z + (rnum >> 6);\n    var d = seedsPartitionTable[6] * x + seedsPartitionTable[7] * y + seedsPartitionTable[9] * z + (rnum >> 2);\n\n    a &= 0x3F;\n    b &= 0x3F;\n    c &= 0x3F;\n    d &= 0x3F;\n\n    if (partitionCount < 4)\n      d = 0;\n    if (partitionCount < 3)\n      c = 0;\n\n    if (a >= b && a >= c && a >= d)\n      return 0;\n    else if (b >= c && b >= d)\n      return 1;\n    else if (c >= d)\n      return 2;\n\n    return 3;\n  };\n\n  /**\n   * Simple swap util procedure swapping to cells in a given array\n   * @param  {array} array contains the cells to swap\n   * @param  {uint} i the first index\n   * @param  {uint} j the second index\n   */\n  var swapCell = function(array, i, j) {\n    var a = array[i];\n    array[i] = array[j];\n    array[j] = a;\n  };\n\n  /**\n   * Computes the total number of bits required to encoded\n   * the same encoded integer a given amount of times.\n   * @param  {uint} nbValues the number of encoded values\n   * @param  {[type]} encodedInteger the encoded value\n   * @return {uint} the number of bits to encoded nbValues of encodedInteger\n   */\n  var getBitsNbrFromEncodedInt = function(nbValues, trits, quints, bits) {\n    var totalBits = bits * nbValues;\n\n    if (trits)\n      totalBits += Math.floor((nbValues * 8 + 4) / 5);\n    else if (quints)\n      totalBits += Math.floor((nbValues * 7 + 2) / 3);\n\n    return totalBits;\n  };\n\n  /**\n   * Computes the number of weight values\n   * available in a given block\n   * @param  {Object} blockInfo the block info containing block size, max weight, etc...\n   * @return {uint} the number of weight values encoded inside the block\n   */\n  var getNumberWeightValues = function(blockInfo) {\n    var nbValues = blockInfo.width * blockInfo.height;\n    if (blockInfo.dualPlane)\n      nbValues *= 2;\n\n    // max nbValues = 12*12*2\n    return nbValues;\n  };\n\n\n  /**\n   * Computes the total number of bits needed to\n   * encode all the weights using Integer Sequence Encoding\n   * @param  {Object} blockInfo the block info containing block size, max weight, etc...\n   * @return {uint} the number of required bits to encoded the weights.\n   */\n  var getPackedBitSize = function(blockInfo) {\n    var nbValues = getNumberWeightValues(blockInfo);\n\n    var idx = blockInfo.maxWeight * 3;\n    var trits = maxWeightQuintsTritsMapper[idx + TRIT_IDX];\n    var quints = maxWeightQuintsTritsMapper[idx + QUINT_IDX];\n    var bits = maxWeightQuintsTritsMapper[idx + BIT_IDX];\n\n    return getBitsNbrFromEncodedInt(nbValues, trits, quints, bits);\n  };\n\n  /**\n   * Reads n values from a given array\n   * @param  {array} decodedColorValues the array to read\n   * @param  {uint} n the number of array cells to read\n   * @return {array} sub-array containing the read data\n   */\n  var readNDecodedColor = function(decodedColorValues, n) {\n    for (var i = 0; i < n; ++i)\n      subDecodedValue[i] = decodedColorValues[decodedColorValuesIdx++];\n    return subDecodedValue;\n  };\n\n  /**\n   * Clamps a pixel to the [0...255] range\n   * @param  {uint} beginIdx the index of the pixel alpha channel\n   * in the endpoints global array\n   */\n  var clampPixel = function(beginIdx) {\n    for (var i = 0; i < 4; ++i)\n      endpoints[beginIdx + i] = Math.max(0, Math.min(255, endpoints[beginIdx + i]));\n  };\n\n  /**\n   * Fills the endpoints global array with the given channel colors\n   * @param  {int} a the alpha channel component\n   * @param  {int} r the red channel component\n   * @param  {int} g the green channel component\n   * @param  {int} b the blue channel component\n   */\n  var fillEndpointsWithPixel = function(a, r, g, b) {\n    var idx = endpoints.currIdx;\n    endpoints[idx] = a;\n    endpoints[idx + 1] = r;\n    endpoints[idx + 2] = g;\n    endpoints[idx + 3] = b;\n  };\n\n  /**\n   * Parses the first 16 bytes a buffer\n   * considering it as an ASTC file buffer.\n   * @param  {ArrayBuffer} imgBuffer buffer containing the ASTC raw data\n   * @return {Object} contains data about the compressed image\n   */\n  var parseHeader = function(imgBuffer) {\n    var header = {};\n\n    var u8buffer = new Uint8Array(imgBuffer);\n    var u32Buffer = new Uint32Array(imgBuffer);\n\n    header.magic = u32Buffer[0];\n\n    var littleEndian = u8buffer[0] === (header.magic & 0xFF);\n\n    var isFormatCorrect = false;\n    if (littleEndian && header.magic === 0x5CA1AB13)\n      isFormatCorrect = true;\n    else if (!littleEndian && header.magic === 0x13ABA15C)\n      isFormatCorrect = true;\n\n    if (!isFormatCorrect)\n      console.error('The ASTC header does not meet the requirements.');\n\n    header.blockDimX = u8buffer[4];\n    header.blockDimY = u8buffer[5];\n    header.blockDimZ = u8buffer[6];\n\n    if (header.blockDimX > 12 || header.blockDimY > 12)\n      console.error('Incorrect ASTC file: block can not be larger than 12x12 pixels.');\n    if (header.blockDimZ > 1)\n      console.error('3D ASTC file are not supported.');\n\n    // Image width\n    header.xSize = u8buffer[7] + (u8buffer[8] << 8) + (u8buffer[9] << 16);\n    // Image height\n    header.ySize = u8buffer[10] + (u8buffer[11] << 8) + (u8buffer[12] << 16);\n    // Image depth\n    header.zSize = u8buffer[13] + (u8buffer[14] << 8) + (u8buffer[15] << 16);\n\n    if (header.zSize > 1)\n      console.error('3D ASTC file are not supported.');\n\n    return header;\n  };\n\n  /**\n   * Computes the layout of 2D block\n   * @param  {uint} blockModeBits extracted 11 first bit of the block\n   * @return {int} contains the layout of the block [0...9]\n   */\n  var findBlockLayout = function(blockModeBits) {\n    var layout = -1;\n\n    // Layout is in [0-4]\n    if ((blockModeBits & 0x1) || blockModeBits & 0x2) {\n      // layout is in [2-4]\n      if (blockModeBits & 0x8) {\n        // layout is in [3-4]\n        if (blockModeBits & 0x4)\n          layout = (blockModeBits & 0x100) ? 4 : 3;\n        else\n          layout = 2;\n      }\n      // layout is in [0-1]\n      else\n        layout = blockModeBits & 0x4 ? 1 : 0;\n\n      return layout;\n    }\n\n    // Layout is in [7-9]\n    if (blockModeBits & 0x100) {\n      // Layout [7-8]\n      if (blockModeBits & 0x80) {\n        if ((blockModeBits & 0x40))\n          console.error('Invalid block layout found.');\n        layout = (blockModeBits & 0x20) ? 8 : 7;\n      } else\n        layout = 9;\n\n      return layout;\n    }\n\n    layout = (blockModeBits & 0x80) ? 6 : 5;\n    return layout;\n  };\n\n  /**\n   * Extracts data regarding how block data are organized\n   * @param  {Uint8Array} u8buffer the ASTC raw data\n   * @param  {uint} blockId the first byte id of the current block\n   * @return {Object} contains block related data (void extent, maximum weight, etc;..)\n   */\n  var getBlockInfo = function(u8buffer, blockId) {\n    var blockInfo = CURRENT_BLOCK_INFO;\n    blockInfo.isVoidExtent = false;\n    blockInfo.error = false;\n\n    // Get the 'block mode' represented by the last 11 bits\n    var blockModeBits = readBits(u8buffer, blockId, bitsReadCount, 11);\n    bitsReadCount += 11;\n\n    // Checks the 9 least significant bits\n    // allowing to know if the block is a void-extent block (uniform color)\n    if ((blockModeBits & 0x01FF) === 0x1FC) {\n      blockInfo.isVoidExtent = true;\n      return blockInfo;\n    }\n\n    // Checks the first reserved pattern\n    // (xxxxx0000)\n    if ((blockModeBits & 0xF) === 0) {\n      blockInfo.error = true;\n      console.log('Warning: Block layout is reserved (xxxxx0000)');\n    }\n\n    // Checks the second reserved pattern\n    // (111xxxx00)\n    if ((blockModeBits & 0x3) === 0 &&\n      (blockModeBits & 0x1C0) === 0x1C0) {\n      blockInfo.error = true;\n      console.log('Warning: Block layout is reserved (111xxxx00)');\n    }\n\n    var layout = findBlockLayout(blockModeBits);\n    if (layout < 0)\n      console.error('Invalid block layout found.');\n\n    // Retrieves the R least significant bit according\n    // to the current block layout\n    var R = !!(blockModeBits & 0x10);\n    if (layout < 5)\n      R |= (blockModeBits & 0x3) << 1;\n    else\n      R |= (blockModeBits & 0xC) >> 1;\n\n    if (R < 2 || R > 7)\n      console.error('Invalid block mode. The file is not encoded in ASTC or corrupted.');\n\n    var a = 0;\n    var b = 0;\n    // Computes weights grid dimension\n    // Refers to ASTC specifications(Table 11)\n    switch (layout) {\n      case 0:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 7) & 0x3;\n        blockInfo.width = b + 4;\n        blockInfo.height = a + 2;\n        break;\n      case 1:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 7) & 0x3;\n        blockInfo.width = b + 8;\n        blockInfo.height = a + 2;\n        break;\n      case 2:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 7) & 0x3;\n        blockInfo.width = a + 2;\n        blockInfo.height = b + 8;\n        break;\n      case 3:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 7) & 0x1;\n        blockInfo.width = a + 2;\n        blockInfo.height = b + 6;\n        break;\n      case 4:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 7) & 0x1;\n        blockInfo.width = b + 2;\n        blockInfo.height = a + 2;\n        break;\n      case 5:\n        a = (blockModeBits >> 5) & 0x3;\n        blockInfo.width = 12;\n        blockInfo.height = a + 2;\n        break;\n      case 6:\n        a = (blockModeBits >> 5) & 0x3;\n        blockInfo.width = a + 2;\n        blockInfo.height = 12;\n        break;\n      case 7:\n        blockInfo.width = 6;\n        blockInfo.height = 10;\n        break;\n      case 8:\n        blockInfo.width = 10;\n        blockInfo.height = 6;\n        break;\n      case 9:\n        a = (blockModeBits >> 5) & 0x3;\n        b = (blockModeBits >> 9) & 0x3;\n        blockInfo.width = a + 6;\n        blockInfo.height = b + 6;\n        break;\n      default:\n        console.error('The block layout is not recognized. Layout should be [0-9].');\n    }\n\n    // The dual plane mode bit is the most significant bit\n    blockInfo.dualPlane = (layout !== 9) && (blockModeBits & 0x400);\n    // The high precision mode bit is the second most significant bit\n    blockInfo.highPrecisionRange = (layout !== 9) && (blockModeBits & 0x200);\n\n    // Selects the appropriate weight range\n    if (blockInfo.highPrecisionRange) {\n      var highWeightRanges = [9, 11, 15, 19, 23, 31];\n      blockInfo.maxWeight = highWeightRanges[R - 2];\n    } else {\n      var weightRanges = [1, 2, 3, 4, 5, 7];\n      blockInfo.maxWeight = weightRanges[R - 2];\n    }\n\n    return blockInfo;\n  };\n\n  /**\n   * Decodes a trit in colorData raw data\n   * @param  {Uint8Array} colorData encoded raw data\n   * @param  {uint} nbBitsPerValue number of bits\n   * on which the integer is encoded\n   * @param  {array} resultStorage contains decoded integer,\n   * the decoded trit will be pushed back at the end of this procedure\n   */\n\n  var lsbDecodingValues = new Uint8Array(5);\n  var msbDecodingValues = new Uint8Array(5);\n\n  var decodeTrit = function(colorData, nbBitsPerValue) {\n    var m = lsbDecodingValues;\n    var t = msbDecodingValues;\n    var T = 0;\n\n    // Refers to ASTC specifications (Table 17)\n    m[0] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    T = readBits(colorData, 0, colorDataBitsRead, 2);\n    colorDataBitsRead += 2;\n\n    m[1] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    T |= readBits(colorData, 0, colorDataBitsRead, 2) << 2;\n    colorDataBitsRead += 2;\n\n    m[2] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    T |= readBits(colorData, 0, colorDataBitsRead, 1) << 4;\n    colorDataBitsRead += 1;\n\n    m[3] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    T |= readBits(colorData, 0, colorDataBitsRead, 2) << 5;\n    colorDataBitsRead += 2;\n\n    m[4] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    T |= readBits(colorData, 0, colorDataBitsRead, 1) << 7;\n    colorDataBitsRead += 1;\n\n    var C = 0 >>> 0;\n    if (extractBits(T, 2, 4) === 7) {\n      C = (extractBits(T, 5, 7) << 2) | extractBits(T, 0, 1);\n      t[3] = 2;\n      t[4] = 2;\n    } else {\n      C = extractBits(T, 0, 4);\n      if (extractBits(T, 5, 6) === 3) {\n        t[4] = 2;\n        t[3] = extractBits(T, 7, 7);\n      } else {\n        t[4] = extractBits(T, 7, 7);\n        t[3] = extractBits(T, 5, 6);\n      }\n    }\n\n    if (extractBits(C, 0, 1) === 3) {\n      t[2] = 2;\n      t[1] = extractBits(C, 4, 4);\n      t[0] = (extractBits(C, 3, 3) << 1) | (extractBits(C, 2, 2) & ~extractBits(C, 3, 3));\n    } else if (extractBits(C, 2, 3) === 3) {\n      t[2] = 2;\n      t[1] = 2;\n      t[0] = extractBits(C, 0, 1);\n    } else {\n      t[2] = extractBits(C, 4, 4);\n      t[1] = extractBits(C, 2, 3);\n      t[0] = (extractBits(C, 1, 1) << 1) | (extractBits(C, 0, 0) & ~extractBits(C, 1, 1));\n    }\n\n    for (var i = 0; i < 5; ++i) {\n      var idx = resultDecodedStorage.currIndex;\n      resultDecodedStorage[idx] = 1;\n      resultDecodedStorage[idx + 1] = 0;\n      resultDecodedStorage[idx + 2] = nbBitsPerValue;\n      resultDecodedStorage[idx + 3] = t[i];\n      resultDecodedStorage[idx + 4] = 0;\n      resultDecodedStorage[idx + 5] = m[i];\n\n      resultDecodedStorage.currIndex += 6;\n    }\n  };\n\n  /**\n   * Decodes a quint in colorData raw data\n   * @param  {Uint8Array} colorData encoded raw data\n   * @param  {uint} nbBitsPerValue number of bits\n   * on which the integer is encoded\n   * @param  {array} resultStorage contains decoded integer,\n   * the decoded quint will be pushed back at the end of this procedure\n   */\n  var decodeQuint = function(colorData, nbBitsPerValue) {\n    var m = lsbDecodingValues;\n    var q = msbDecodingValues;\n    var Q = 0;\n\n    // Refers to ASTC specifications (Table 18)\n    m[0] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    Q = readBits(colorData, 0, colorDataBitsRead, 3);\n    colorDataBitsRead += 3;\n\n    m[1] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    Q |= readBits(colorData, 0, colorDataBitsRead, 2) << 3;\n    colorDataBitsRead += 2;\n\n    m[2] = readBits(colorData, 0, colorDataBitsRead, nbBitsPerValue);\n    colorDataBitsRead += nbBitsPerValue;\n\n    Q |= readBits(colorData, 0, colorDataBitsRead, 2) << 5;\n    colorDataBitsRead += 2;\n\n    if (extractBits(Q, 1, 2) === 3 && extractBits(Q, 5, 6) === 0) {\n      q[0] = 4;\n      q[1] = 4;\n      q[2] = (extractBits(Q, 0, 0) << 2) | ((extractBits(Q, 4, 4) & ~extractBits(Q, 0, 0)) << 1) | (extractBits(Q, 3, 3) & ~extractBits(Q, 0, 0));\n    } else {\n      var C = 0 >>> 0;\n      if (extractBits(Q, 1, 2) === 3) {\n        q[2] = 4;\n        C = (extractBits(Q, 3, 4) << 3) | ((~extractBits(Q, 5, 6) & 3) << 1) | (extractBits(Q, 0, 0));\n      } else {\n        q[2] = extractBits(Q, 5, 6);\n        C = extractBits(Q, 0, 4);\n      }\n\n      if (extractBits(C, 0, 2) === 5) {\n        q[1] = 4;\n        q[0] = extractBits(C, 3, 4);\n      } else {\n        q[1] = extractBits(C, 3, 4);\n        q[0] = extractBits(C, 0, 2);\n      }\n    }\n\n    for (var i = 0; i < 3; ++i) {\n      var idx = resultDecodedStorage.currIndex;\n      resultDecodedStorage[idx] = 0;\n      resultDecodedStorage[idx + 1] = 1;\n      resultDecodedStorage[idx + 2] = nbBitsPerValue;\n      resultDecodedStorage[idx + 3] = 0;\n      resultDecodedStorage[idx + 4] = q[i];\n      resultDecodedStorage[idx + 5] = m[i];\n\n      resultDecodedStorage.currIndex += 6;\n    }\n  };\n\n  /**\n   * Decodes nbValues of colorData raw data\n   * according to its max range value\n   * @param  {Uint8Array} colorData encoded raw data\n   * @param  {uint} range max value of the Integere Sequence\n   * @param  {uint} nbValues contains the number of values to decode\n   * @return {array} contains decoded integer\n   */\n  var decodeIntegerSequence = function(colorData, range, nbValues) {\n    var baseIdx = range * 3;\n    var trits = maxWeightQuintsTritsMapper[baseIdx + TRIT_IDX];\n    var quints = maxWeightQuintsTritsMapper[baseIdx + QUINT_IDX];\n    var bits = maxWeightQuintsTritsMapper[baseIdx + BIT_IDX];\n\n    resultDecodedStorage.currIndex = 0;\n\n    var nbDecodedValues = 0;\n    while (nbDecodedValues < nbValues) {\n\n      if (quints === 0 && trits === 0) {\n        var idx = resultDecodedStorage.currIndex;\n        resultDecodedStorage[idx] = trits;\n        resultDecodedStorage[idx + 1] = quints;\n        resultDecodedStorage[idx + 2] = bits;\n        resultDecodedStorage[idx + 3] = 0;\n        resultDecodedStorage[idx + 4] = 0;\n        resultDecodedStorage[idx + 5] = readBits(colorData, 0, colorDataBitsRead, bits);\n        colorDataBitsRead += bits;\n\n        resultDecodedStorage.currIndex += 6;\n\n        nbDecodedValues++;\n      } else if (quints === 1 && trits === 0) {\n        decodeQuint(colorData, bits);\n        nbDecodedValues += 3;\n      } else {\n        decodeTrit(colorData, bits);\n        nbDecodedValues += 5;\n      }\n    }\n  };\n\n  /**\n   * Decodes color from the colorData encoded Integer Sequence\n   * @param  {Uint8Array} colorData encoded color raw data\n   * @param  {array} colorModes contains the color for each partition\n   * @param  {uint} nbPartitions Number of available partitions\n   * @param  {uint} colorDataBits remaining bits number on which color data are encoded\n   * @return {array} decoded endpoints value in the [0...255] range\n   */\n\n  var endpointValuesOutput = new Uint8Array(32);\n\n  var decodeColorValues = function(colorData, colorModes, nbPartitions, colorDataBits) {\n    var trits = 0;\n    var quints = 0;\n    var bits = 0;\n    var i = 0;\n    // Computes the number of endpoint by using the associated class\n    // max endpoint values = 32\n    var nbEndpointValues = 0;\n    for (i = 0; i < nbPartitions; ++i)\n      nbEndpointValues += ((colorModes[i] >> 2) + 1) << 1;\n\n    // Finds the max range for each color endpoints\n    var range = 256;\n    while (--range > 0) {\n\n      var idx = range * 3;\n      trits = maxWeightQuintsTritsMapper[idx + TRIT_IDX];\n      quints = maxWeightQuintsTritsMapper[idx + QUINT_IDX];\n      bits = maxWeightQuintsTritsMapper[idx + BIT_IDX];\n\n      var bitsNbr = getBitsNbrFromEncodedInt(nbEndpointValues, trits, quints, bits);\n      if (bitsNbr <= colorDataBits) {\n        // Some integers share the same encoding\n        // this piece of code finds the smallest one\n        while (--range > 0) {\n          var newIdx = range * 3;\n          var newTrits = maxWeightQuintsTritsMapper[newIdx + TRIT_IDX];\n          var newQuints = maxWeightQuintsTritsMapper[newIdx + QUINT_IDX];\n          var newBits = maxWeightQuintsTritsMapper[newIdx + BIT_IDX];\n\n          if (newTrits !== trits || newQuints !== quints || newBits !== bits)\n            break;\n        }\n\n        range++;\n        break;\n      }\n    }\n\n    // Decodes the integer sequence based on the range and\n    // the number of values\n    var endpointIdx = 0;\n    decodeIntegerSequence(colorData, range, nbEndpointValues);\n\n    for (i = 0; i < nbEndpointValues * 6; i += 6) {\n      var bitLength = resultDecodedStorage[i + BIT_IDX];\n      var bitValue = resultDecodedStorage[i + BIT_IDX + 3];\n\n      // Refers to ASTC specifications(Section 3.11)\n      var result;\n      if (resultDecodedStorage[i + TRIT_IDX]) result = cacheDecodeTrits[bitLength + resultDecodedStorage[i + TRIT_IDX + 3] * 7 + bitValue * 21];\n      else if (resultDecodedStorage[i + QUINT_IDX]) result = cacheDecodeQuints[bitLength + resultDecodedStorage[i + QUINT_IDX + 3] * 6 + bitValue * 30];\n      else result = cacheDecodeSimple[bitLength + bitValue * 9];\n\n      endpointValuesOutput[endpointIdx++] = result;\n    }\n\n    // Makes sure each decoded value is not ambiguous\n    for (i = 0; i < nbEndpointValues; ++i)\n      if (endpointValuesOutput[i] > 255)\n        console.error('Decoded endpoint value can not be above 255.');\n  };\n\n  /**\n   * Computes the two color endpoint values\n   * from the decoded Integer Sequence data\n   * @param  {[type]} endpointColorValues [description]\n   * @param  {[type]} colorMode           [description]\n   */\n  var computeColorEndpointsLDR = function(endpointColorValues, colorMode) {\n    var v = 0;\n    var currIdx = 0;\n\n    switch (colorMode) {\n      case 0:\n        v = readNDecodedColor(endpointColorValues, 2);\n        fillEndpointsWithPixel(0xFF, v[0], v[0], v[0]);\n        endpoints.currIdx += 4;\n        fillEndpointsWithPixel(0xFF, v[1], v[1], v[1]);\n        endpoints.currIdx += 4;\n        break;\n      case 1:\n        v = readNDecodedColor(endpointColorValues, 2);\n        var L0 = (v[0] >> 2) | (v[1] & 0xC0);\n        var L1 = Math.max(L0 + (v[1] & 0x3F), 0xFF);\n\n        fillEndpointsWithPixel(0xFF, L0, L0, L0);\n        endpoints.currIdx += 4;\n        fillEndpointsWithPixel(0xFF, L1, L1, L1);\n        endpoints.currIdx += 4;\n        break;\n      case 4:\n        v = readNDecodedColor(endpointColorValues, 4);\n\n        fillEndpointsWithPixel(v[2], v[0], v[0], v[0]);\n        endpoints.currIdx += 4;\n        fillEndpointsWithPixel(v[3], v[1], v[1], v[1]);\n        endpoints.currIdx += 4;\n        break;\n      case 5:\n        v = readNDecodedColor(endpointColorValues, 4);\n\n        bitTransferSigned(v, 1, 0);\n        bitTransferSigned(v, 3, 2);\n\n        currIdx = endpoints.currIdx;\n\n        fillEndpointsWithPixel(v[2], v[0], v[0], v[0]);\n        endpoints.currIdx += 4;\n\n        fillEndpointsWithPixel(v[2] + v[3], v[0] + v[1], v[0] + v[1], v[0] + v[1]);\n        endpoints.currIdx += 4;\n\n        clampPixel(currIdx);\n        clampPixel(currIdx + 4);\n        break;\n      case 6:\n        v = readNDecodedColor(endpointColorValues, 4);\n\n        fillEndpointsWithPixel(0xFF, v[0] * v[3] >> 8, v[1] * v[3] >> 8, v[2] * v[3] >> 8);\n        endpoints.currIdx += 4;\n        fillEndpointsWithPixel(0xFF, v[0], v[1], v[2]);\n        endpoints.currIdx += 4;\n        break;\n      case 8:\n        v = readNDecodedColor(endpointColorValues, 6);\n        if (v[1] + v[3] + v[5] >= v[0] + v[2] + v[4]) {\n          fillEndpointsWithPixel(0xFF, v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n          fillEndpointsWithPixel(0xFF, v[1], v[3], v[5]);\n          endpoints.currIdx += 4;\n        } else {\n          blueContract(0xFF, v[1], v[3], v[5]);\n          endpoints.currIdx += 4;\n          blueContract(0xFF, v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n        }\n        break;\n      case 9:\n        v = readNDecodedColor(endpointColorValues, 6);\n\n        bitTransferSigned(v, 1, 0);\n        bitTransferSigned(v, 3, 2);\n        bitTransferSigned(v, 5, 4);\n\n        currIdx = endpoints.currIdx;\n\n        if (v[1] + v[3] + v[5] >= 0) {\n          fillEndpointsWithPixel(0xFF, v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n\n          fillEndpointsWithPixel(0xFF, v[0] + v[1], v[2] + v[3], v[4] + v[5]);\n          endpoints.currIdx += 4;\n        } else {\n          blueContract(0xFF, v[0] + v[1], v[2] + v[3], v[4] + v[5]);\n          endpoints.currIdx += 4;\n\n          blueContract(0xFF, v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n        }\n        clampPixel(currIdx);\n        clampPixel(currIdx + 4);\n        break;\n      case 10:\n        v = readNDecodedColor(endpointColorValues, 6);\n\n        fillEndpointsWithPixel(v[4], v[0] * v[3] >> 8, v[1] * v[3] >> 8, v[2] * v[3] >> 8);\n        endpoints.currIdx += 4;\n        fillEndpointsWithPixel(v[5], v[0], v[1], v[2]);\n        endpoints.currIdx += 4;\n        break;\n      case 12:\n        v = readNDecodedColor(endpointColorValues, 8);\n        if (v[1] + v[3] + v[5] >= v[0] + v[2] + v[4]) {\n          fillEndpointsWithPixel(v[6], v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n          fillEndpointsWithPixel(v[7], v[1], v[3], v[5]);\n          endpoints.currIdx += 4;\n        } else {\n          blueContract(v[7], v[1], v[3], v[5]);\n          endpoints.currIdx += 4;\n          blueContract(v[6], v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n        }\n        break;\n      case 13:\n        v = readNDecodedColor(endpointColorValues, 8);\n\n        bitTransferSigned(v, 1, 0);\n        bitTransferSigned(v, 3, 2);\n        bitTransferSigned(v, 5, 4);\n        bitTransferSigned(v, 7, 6);\n\n        currIdx = endpoints.currIdx;\n\n        if (v[1] + v[3] + v[5] >= 0) {\n          fillEndpointsWithPixel(v[6], v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n\n          fillEndpointsWithPixel(v[7] + v[6], v[0] + v[1], v[2] + v[3], v[4] + v[5]);\n          endpoints.currIdx += 4;\n        } else {\n          blueContract(v[6] + v[7], v[0] + v[1], v[2] + v[3], v[4] + v[5]);\n          endpoints.currIdx += 4;\n\n          blueContract(v[6], v[0], v[2], v[4]);\n          endpoints.currIdx += 4;\n        }\n        clampPixel(currIdx);\n        clampPixel(currIdx + 4);\n        break;\n      default:\n        console.error('Unsupported color endpoint mode. Only LDR modes are supported.');\n    }\n  };\n\n  /**\n   * Unquantizes a single texel returning it to a standard\n   * [0...64] range according to its trit/quint/bit encoding\n   * @param  {uint} val the decoded integer\n   * @return {uint} the unquantized weight in the range [0...64]\n   */\n  var unquantizeTexel = function(i) {\n    var bitLength = resultDecodedStorage[i + BIT_IDX];\n    var bitValue = resultDecodedStorage[i + BIT_IDX + 3];\n\n    // Refers to ASTC specifications (Section 3.11)\n    if (resultDecodedStorage[i + TRIT_IDX]) return cacheUnquantizeTrits[bitLength + resultDecodedStorage[i + TRIT_IDX + 3] * 4 + bitValue * 12];\n    if (resultDecodedStorage[i + QUINT_IDX]) return cacheUnquantizeQuints[bitLength + resultDecodedStorage[i + QUINT_IDX + 3] * 3 + bitValue * 15];\n    return cacheUnquantizeSimple[bitLength + bitValue * 8];\n  };\n\n  /**\n   * Returns weights in a standard range [0...64]\n   * @param  {array} weightValues contains the decoded\n   * Integer Sequence of the weight data\n   * @param  {uint} blockId the current block index\n   * @param  {uint} blockWidth the width of the blocks\n   * @param  {uint} blockHeight the height of the blocks\n   * @return {array} multidimensional array containing the weights\n   * for both planes\n   */\n\n  var unquantizedOutput = new Uint8Array(2 * 144);\n  var infilledWeightsOutput = new Uint8Array(2 * 144);\n\n  var unquantizeWeights = function(blockInfo, blockWidth, blockHeight, nbWeightValues) {\n\n    var bw = blockInfo.width;\n    var bh = blockInfo.height;\n    var bwh = bw * bh;\n\n    var i = 0;\n    var end = 0;\n\n    if (blockInfo.dualPlane) {\n      end = Math.min(nbWeightValues * 2, bwh);\n      for (i = 0; i < end; ++i) {\n        unquantizedOutput[i] = unquantizeTexel(i * 12);\n        unquantizedOutput[i + 144] = unquantizeTexel(i * 12 + 6);\n      }\n\n    } else {\n      // Unquantizes the whole weight grid\n      end = Math.min(nbWeightValues, bwh);\n      for (i = 0; i < end; ++i) {\n        unquantizedOutput[i] = unquantizeTexel(i * 6);\n      }\n    }\n\n    // Applies the weight infill procedure\n    // Refers to ASTC specifications (Section 3.12)\n    // 3D blocks are not handled for the moment\n    var Ds = ((1024 + (blockWidth / 2)) / (blockWidth - 1)) >>> 0;\n    var Dt = ((1024 + (blockHeight / 2)) / (blockHeight - 1)) >>> 0;\n    var dPlane = (blockInfo.dualPlane) ? 2 : 1;\n\n    for (var planeId = 0; planeId < dPlane; ++planeId) {\n      var idp = planeId * 144;\n      for (var t = 0; t < blockHeight; ++t) {\n        for (var s = 0; s < blockWidth; ++s) {\n          var cs = Ds * s;\n          var ct = Dt * t;\n\n          var gs = (cs * (bw - 1) + 32) >> 6;\n          var gt = (ct * (bh - 1) + 32) >> 6;\n\n          var js = gs >> 4;\n          var fs = gs & 0xF;\n\n          var jt = gt >> 4;\n          var ft = gt & 0x0F;\n\n          var w11 = (fs * ft + 8) >> 4;\n          var w10 = (ft - w11) >>> 0;\n          var w01 = (fs - w11) >>> 0;\n          var w00 = (16 - fs - ft + w11) >>> 0;\n\n          var v0 = js + jt * bw;\n\n          var val = 8;\n          var vid = v0;\n          if (vid < bwh) val += w00 * unquantizedOutput[vid + idp];\n\n          vid = v0 + 1;\n          if (vid < bwh) val += w01 * unquantizedOutput[vid + idp];\n\n          vid = v0 + bw;\n          if (vid < bwh) val += w10 * unquantizedOutput[vid + idp];\n\n          vid = v0 + bw + 1;\n          if (vid < bwh) val += w11 * unquantizedOutput[vid + idp];\n\n          infilledWeightsOutput[t * blockWidth + s + idp] = val >> 4;\n        }\n      }\n    }\n  };\n\n  /**\n   * Decompresses a single void-extent block,\n   * in other words, a block containing only one color\n   * @param  {Uint8Array} u8buffer the ASTC raw data\n   * @param  {uint} blockId the current block index\n   * @param  {uint} blockWidth the width of the blocks\n   * @param  {uint} blockHeight the height of the blocks\n   * @return {array} containing blockWidth * blockHeight Pixels\n   */\n  var decompressVoidExtent = function(u8buffer, blockId, blockInfo, blockWidth, blockHeight) {\n    // Do not read extra data\n    bitsReadCount += 53;\n\n    var r16 = readBits(u8buffer, blockId, bitsReadCount, 16);\n    bitsReadCount += 16;\n    var g16 = readBits(u8buffer, blockId, bitsReadCount, 16);\n    bitsReadCount += 16;\n    var b16 = readBits(u8buffer, blockId, bitsReadCount, 16);\n    bitsReadCount += 16;\n    var a16 = readBits(u8buffer, blockId, bitsReadCount, 16);\n    bitsReadCount += 16;\n\n    if (bitsReadCount !== 128)\n      console.error('Invalid void-extent bits reading.');\n\n    var nbPixel = blockWidth * blockHeight * 4;\n    for (var i = 0; i < nbPixel; i += 4) {\n      blockPixelsOutput[i] = extractBits(a16, 0, 7);\n      blockPixelsOutput[i + 1] = extractBits(r16, 0, 7);\n      blockPixelsOutput[i + 2] = extractBits(g16, 0, 7);\n      blockPixelsOutput[i + 3] = extractBits(b16, 0, 7);\n    }\n  };\n\n  /**\n   * Decompresses a single block by returning\n   * the error color (0xFF, 0xFF, 0x00, 0xFF)\n   * @param  {uint} blockWidth the width of the blocks\n   * @param  {uint} blockHeight the height of the blocks\n   * @return {array} containing blockWidth * blockHeight Pixels\n   */\n  var getErrorPixelBlock = function(blockWidth, blockHeight) {\n    var nbPixel = blockWidth * blockHeight * 4;\n    for (var i = 0; i < nbPixel; i += 4) {\n      blockPixelsOutput[i] = 0xFF;\n      blockPixelsOutput[i + 1] = 0xFF;\n      blockPixelsOutput[i + 2] = 0x00;\n      blockPixelsOutput[i + 3] = 0xFF;\n    }\n  };\n\n  /**\n   * Decompresses a single block by retrieving\n   * the block layout as well as the number of partitions,\n   * the color endpoints and weights data.\n   * @param  {Uint8Array} u8buffer the ASTC raw data\n   * @param  {uint} blockId the current block index\n   * @param  {uint} blockWidth the width of the blocks\n   * @param  {uint} blockHeight the height of the blocks\n   * @return {array} containing blockWidth * blockHeight Pixels\n   */\n  var decompressBlock = function(u8buffer, blockId, blockWidth, blockHeight) {\n    bitsReadCount = 0;\n    bitsWrittenCount = 0;\n    colorDataBitsRead = 0;\n    decodedColorValuesIdx = 0;\n\n    var i = 0;\n    var CEM = 0;\n    var blockInfo = getBlockInfo(u8buffer, blockId);\n\n    if (blockInfo.error)\n      return getErrorPixelBlock(blockWidth, blockHeight);\n\n    // Handles the case whenever the block is filled with only one color\n    if (blockInfo.isVoidExtent)\n      return decompressVoidExtent(u8buffer, blockId, blockInfo, blockWidth, blockHeight);\n\n    if (blockInfo.width > blockWidth)\n      console.error('Texel weight grid width can not be larger than the block width.');\n    if (blockInfo.height > blockHeight)\n      console.error('Texel weight grid height can not be larger than the block height.');\n\n    // Extracts the partitions number\n    var nbPartitions = readBits(u8buffer, blockId, bitsReadCount, 2) + 1;\n    bitsReadCount += 2;\n\n    if (nbPartitions > 4)\n      console.error('The block partitions number is too high.');\n    if (nbPartitions === 4 && blockInfo.dualPlane)\n      return getErrorPixelBlock(blockWidth, blockHeight);\n\n    // Reads the extra configuration field\n    // At most 4 modes describing how color data is encoded\n    var colorEndpointModes = [0, 0, 0, 0];\n    var partitionIndex = -1;\n    var planeIndex = -1;\n    var cemBits = 0;\n    if (nbPartitions === 1) {\n      colorEndpointModes[0] = readBits(u8buffer, blockId, bitsReadCount, 4);\n      bitsReadCount += 4;\n      partitionIndex = 0;\n    } else {\n      // Reads 10 bits containing the partition index\n      partitionIndex = readBits(u8buffer, blockId, bitsReadCount, 10);\n      bitsReadCount += 10;\n      // Reads 6 bits containing the cem extra\n      cemBits = readBits(u8buffer, blockId, bitsReadCount, 6);\n      bitsReadCount += 6;\n    }\n    var baseMode = (cemBits & 3);\n\n    // Computes remaining bits containing color endpoint data\n    //var numberWeightBits = getPackedBitSize(blockInfo);\n    var remainingBits = 128 - getPackedBitSize(blockInfo) - bitsReadCount;\n    var dualPlaneSelectorBits = (blockInfo.dualPlane) ? 2 : 0;\n    remainingBits -= dualPlaneSelectorBits;\n\n    // Gets extra bits number according to CEM\n    // mode 0 does not need any extra CEM bits\n    var extraCEMbitsNb = 0;\n    if (baseMode) {\n      if (nbPartitions === 2)\n        extraCEMbitsNb = 2;\n      else if (nbPartitions === 3)\n        extraCEMbitsNb = 5;\n      else if (nbPartitions === 4)\n        extraCEMbitsNb = 8;\n    }\n    remainingBits -= extraCEMbitsNb;\n\n    // Reads color data\n    // read data are written to a buffer for later use\n    var colorDataBits = remainingBits;\n    for (i = 0; i < 16; ++i)\n      colorEndpointData[i] = 0;\n\n    while (remainingBits > 0) {\n      var bitsNb = Math.min(remainingBits, 8);\n      var bits = readBits(u8buffer, blockId, bitsReadCount, bitsNb);\n      bitsReadCount += bitsNb;\n\n      writeBits(colorEndpointData, bits, bitsNb, bitsWrittenCount);\n      bitsWrittenCount += bitsNb;\n\n      remainingBits -= 8;\n    }\n\n    planeIndex = readBits(u8buffer, blockId, bitsReadCount, dualPlaneSelectorBits);\n    bitsReadCount += dualPlaneSelectorBits;\n\n    // Reads extra CEM data\n    if (baseMode) {\n      var extraCEMbits = readBits(u8buffer, blockId, bitsReadCount, extraCEMbitsNb);\n      bitsReadCount += extraCEMbitsNb;\n\n      CEM = (extraCEMbits << 6) | cemBits;\n      CEM >>= 2;\n\n      // Extracts the class selector bit by bit\n      var C = classSelectorBitsArray;\n      var M = colorModeLSB;\n      for (i = 0; i < nbPartitions; ++i) {\n        C[i] = CEM & 1;\n        CEM >>= 1;\n      }\n      // Extracts the color endoint mode low bits\n      /*for (i = 0; i < nbPartitions; ++i) {\n        M[i] = CEM & 3;\n        CEM >>= 2;\n        if (M[i] > 3)\n          console.error(  'Error while extracting the color endpoint mode LSB.'); \n      }*/\n      for (i = 0; i < nbPartitions; ++i) {\n        M[i] = CEM & 3;\n        CEM >>= 2;\n        if (M[i] > 3)\n          console.error('Error while extracting the color endpoint mode LSB.');\n\n        colorEndpointModes[i] = baseMode;\n        if (!(C[i]))\n          colorEndpointModes[i] -= 1;\n        colorEndpointModes[i] <<= 2;\n        colorEndpointModes[i] |= M[i];\n      }\n    } else if (nbPartitions > 1) {\n      CEM = cemBits >> 2;\n      for (i = 0; i < nbPartitions; ++i)\n        colorEndpointModes[i] = CEM;\n    }\n\n    // Makes sure the extracted data obtained until here is correct\n    var blockBitsRead = bitsReadCount + getPackedBitSize(blockInfo);\n\n    for (i = 0; i < nbPartitions; ++i)\n      if (colorEndpointModes[i] >= 16)\n        console.error('The color endpoint mode ' + colorEndpointModes[i] + ' is not correct.');\n\n    if (blockBitsRead < 128)\n      console.error('The current block as not been read entirely. (' + blockBitsRead + ' read)');\n    else if (blockBitsRead > 128)\n      console.error('Too many bits have been read for the current block. (' + blockBitsRead + ' read)');\n\n    // Decodes color data\n    decodeColorValues(colorEndpointData, colorEndpointModes, nbPartitions, colorDataBits);\n\n    // Computes endpoint for all partitions\n    endpoints.currIdx = 0;\n    for (i = 0; i < nbPartitions; i++)\n      computeColorEndpointsLDR(endpointValuesOutput, colorEndpointModes[i]);\n\n    // Reads remaining bits containing packed texel weight data\n    // This code can be factorized with the color data reading above\n    var texelWeightDataIndex = 0;\n    for (i = 0; i < 16; ++i)\n      texelWeightData[texelWeightDataIndex++] = u8buffer[blockId + i];\n\n    // Reverses the textWeightData array\n    // and each byte\n    reverseU8Array(texelWeightData);\n\n    var weightPackedSize = getPackedBitSize(blockInfo);\n    var clearByteStart = (weightPackedSize >> 3) + 1;\n    var nbBytesToClean = 16 - clearByteStart;\n    texelWeightData[clearByteStart - 1] &= (1 << (weightPackedSize % 8)) - 1;\n    for (i = 0; i < nbBytesToClean; ++i)\n      texelWeightData[clearByteStart + i] = 0;\n\n    // Decodes the weight\n    colorDataBitsRead = 0;\n    var nbWeightValues = getNumberWeightValues(blockInfo);\n    decodeIntegerSequence(texelWeightData, blockInfo.maxWeight, nbWeightValues);\n\n    unquantizeWeights(blockInfo, blockWidth, blockHeight, nbWeightValues);\n\n    // Interpolates colors\n    var smallBlock = (blockHeight * blockWidth) < 32;\n    var rnum = precomputeSelectPartition(partitionIndex, nbPartitions);\n    for (var j = 0; j < blockHeight; j++) {\n      for (i = 0; i < blockWidth; i++) {\n        var partition = selectPartition(rnum, i, j, 0, nbPartitions, smallBlock);\n        if (partition >= nbPartitions)\n          console.error('The block partition index can not be larger or equal to the number of partitions.');\n\n        var rowIndex = (j * blockWidth + i) * 4;\n        var endpointBaseIdx = partition * 8;\n        for (var c = 0; c < 4; ++c) {\n          var C0 = endpoints[endpointBaseIdx + c] >>> 0;\n          C0 = replicateBits0816Map[C0];\n\n          var C1 = endpoints[endpointBaseIdx + c + 4] >>> 0;\n          C1 = replicateBits0816Map[C1];\n\n          var plane = 0 >>> 0;\n          if (blockInfo.dualPlane && (((planeIndex + 1) & 3) === c))\n            plane = 1;\n\n          var weight = infilledWeightsOutput[j * blockWidth + i + plane * 144];\n          var color = Math.floor(((C0 * (64 - weight) + C1 * weight + 32) / 64));\n\n          if (color === 65535)\n            blockPixelsOutput[rowIndex + c] = 255;\n          else\n            blockPixelsOutput[rowIndex + c] = Math.round(255.0 * (color / 65536.0));\n        }\n      }\n    }\n  };\n\n  /**\n   * Decompresses a complete buffer containing ASTC file raw data\n   * @param  {ArrayBuffer} contains the compressed ASTC raw data\n   * @return {Object} contains the uncompressed image buffer\n   * as well as the image dimensions\n   */\n  // TODO export\n  var decompress = function(imgBuffer) {\n    var u8buffer = new Uint8Array(imgBuffer);\n\n    // Retrieves the header\n    var header = parseHeader(imgBuffer);\n\n    var imgWidth = header.xSize;\n    var imgHeight = header.ySize;\n    var halfImgHeight = (imgHeight >> 1);\n\n    var blockWidth = header.blockDimX;\n    var blockHeight = header.blockDimY;\n\n    var firstBlockIndex = 16;\n    var blockNb = 0;\n\n    // Initializes temp storages used\n    // in helper functions\n    blockPixelsOutput = new Uint8Array(blockWidth * blockHeight * 4);\n\n    var j = 0;\n    var i = 0;\n    var resultImg = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n\n    for (j = 0; j < imgHeight; j += blockHeight) {\n      for (i = 0; i < imgWidth; i += blockWidth) {\n\n        var currentBlockIndex = firstBlockIndex + blockNb * 16;\n        // Decompresses the current block\n        decompressBlock(u8buffer, currentBlockIndex, blockWidth, blockHeight);\n\n        var widthBound = Math.min(blockWidth, imgWidth - i);\n        var heightBound = Math.min(blockHeight, imgHeight - j);\n        var rowIndex = (j * imgWidth + i) * 4;\n        for (var jj = 0; jj < heightBound; jj++) {\n          var destId = rowIndex + jj * imgWidth * 4;\n          var srcId = jj * blockWidth * 4;\n\n          for (var x = 0; x < widthBound * 4; x += 4) {\n            resultImg[destId + x] = blockPixelsOutput[srcId + x + 1];\n            resultImg[destId + x + 1] = blockPixelsOutput[srcId + x + 2];\n            resultImg[destId + x + 2] = blockPixelsOutput[srcId + x + 3];\n            resultImg[destId + x + 3] = blockPixelsOutput[srcId + x];\n          }\n        }\n\n        ++blockNb;\n      }\n    }\n\n    // Flips the image using the Y-axis\n    for (j = 0; j < halfImgHeight; j++) {\n      for (i = 0; i < imgWidth; i++) {\n        var beginByte = (j * imgWidth + i) * 4;\n        var endByte = ((imgHeight - j - 1) * imgWidth + i) * 4;\n\n        swapCell(resultImg, beginByte, endByte);\n        swapCell(resultImg, beginByte + 1, endByte + 1);\n        swapCell(resultImg, beginByte + 2, endByte + 2);\n        swapCell(resultImg, beginByte + 3, endByte + 3);\n      }\n    }\n\n    var result = {};\n    result.img = resultImg;\n    result.width = imgWidth;\n    result.height = imgHeight;\n\n    return result;\n  };\n\n  module.exports = {\n    decompress: decompress\n  };\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n  'use strict';\n\n  var replicateBits = __webpack_require__(3).replicateBits;\n\n  // Describes how to unpack trit/quint\n  // with no additional bits\n  var WEIGHT_TRIT_RANGE = [0, 32, 63];\n  var WEIGHT_QUINT_RANGE = [0, 16, 32, 47, 63];\n\n  ///////////////////\n  // CACHE UNQUANTIZE\n  ///////////////////\n\n  // -----------------\n  // UNQUANTIZE SIMPLE\n  // -----------------\n  var cacheUnquantizeSimple = new Uint8Array(256 * 8);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var bitLength = 1; bitLength < 8; ++bitLength) {\n\n      var result = replicateBits(bitValue, bitLength, 6);\n      if (result > 32) result++;\n\n      cacheUnquantizeSimple[bitLength + bitValue * 8] = result;\n    }\n  }\n\n  // ----------------\n  // UNQUANTIZE TRITS\n  // ----------------\n  var cacheUnquantizeTrits = new Uint8Array(256 * 3 * 4);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var tri = 0; tri < 3; ++tri) {\n      for (var bitLength = 0; bitLength < 4; ++bitLength) {\n\n        var C = 0;\n        var B = 0;\n        var result;\n        switch (bitLength) {\n          case 0:\n            result = WEIGHT_TRIT_RANGE[tri];\n            break;\n          case 1:\n            C = 50;\n            break;\n          case 2:\n            C = 23;\n            var bBit = (bitValue >> 1) & 1;\n            B = (bBit << 6) | (bBit << 2) | bBit;\n            break;\n          case 3:\n            C = 11;\n            var cbBits = (bitValue >> 1) & 3;\n            B = (cbBits << 5) | cbBits;\n            break;\n        }\n\n        if (bitLength > 0) {\n          var A = bitValue % 2 ? 127 : 0;\n          result = tri * C + B;\n          result ^= A;\n          result = (A & 0x20) | (result >> 2);\n        }\n\n        if (result > 32) result++;\n\n        cacheUnquantizeTrits[bitLength + tri * 4 + bitValue * 12] = result;\n      }\n    }\n  }\n\n  // -----------------\n  // UNQUANTIZE QUINTS\n  // -----------------\n  var cacheUnquantizeQuints = new Uint8Array(256 * 5 * 3);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var quint = 0; quint < 5; ++quint) {\n      for (var bitLength = 0; bitLength < 3; ++bitLength) {\n\n        var C = 0;\n        var B = 0;\n        var result;\n        switch (bitLength) {\n          case 0:\n            result = WEIGHT_QUINT_RANGE[quint];\n            break;\n          case 1:\n            C = 28;\n            break;\n          case 2:\n            C = 13;\n            var bBits = (bitValue >> 1) & 1;\n            B = (bBits << 6) | (bBits << 1);\n            break;\n        }\n\n        if (bitLength > 0) {\n          var A = bitValue % 2 ? 127 : 0;\n          result = quint * C + B;\n          result ^= A;\n          result = (A & 0x20) | (result >> 2);\n        }\n\n        if (result > 32) result++;\n\n        cacheUnquantizeQuints[bitLength + quint * 3 + bitValue * 15] = result;\n      }\n    }\n  }\n\n  ///////////////\n  // CACHE DECODE\n  ///////////////\n\n  // -------------\n  // DECODE SIMPLE\n  // -------------\n  var cacheDecodeSimple = new Uint8Array(256 * 9);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var bitLength = 1; bitLength < 9; ++bitLength) {\n      cacheDecodeSimple[bitLength + bitValue * 9] = replicateBits(bitValue, bitLength, 8);\n    }\n  }\n\n  // ----------------\n  // UNQUANTIZE TRITS\n  // ----------------\n  var cacheDecodeTrits = new Uint8Array(256 * 3 * 7);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var tri = 0; tri < 3; ++tri) {\n      for (var bitLength = 0; bitLength < 7; ++bitLength) {\n\n        var C = 0;\n        var B = 0;\n        var result;\n        switch (bitLength) {\n          case 1:\n            C = 204;\n            break;\n          case 2:\n            C = 93;\n            // b000b0bb0\n            var bBit = (bitValue >> 1) & 1;\n            B = (bBit << 8) | (bBit << 4) | (bBit << 2) | (bBit << 1);\n            break;\n          case 3:\n            C = 44;\n            // cb000cbcb\n            var cbBit = (bitValue >> 1) & 3;\n            B = (cbBit << 7) | (cbBit << 2) | cbBit;\n            break;\n          case 4:\n            C = 22;\n            // dcb000dcb\n            var dcbBit = (bitValue >> 1) & 7;\n            B = (dcbBit << 6) | dcbBit;\n            break;\n          case 5:\n            C = 11;\n            // edcb000ed\n            var edcbBit = (bitValue >> 1) & 0xF;\n            B = (edcbBit << 5) | (edcbBit >> 2);\n            break;\n          case 6:\n            C = 5;\n            // fedcb000f\n            var fedcbBit = (bitValue >> 1) & 0x1F;\n            B = (fedcbBit << 4) | (fedcbBit >> 4);\n            break;\n        }\n\n        if (bitLength > 0) {\n          var A = bitValue % 2 ? 511 : 0;\n          result = (tri * C + B) >>> 0;\n          result ^= A;\n          result = (A & 0x80) | (result >> 2);\n        }\n\n        cacheDecodeTrits[bitLength + tri * 7 + bitValue * 21] = result;\n      }\n    }\n  }\n\n  // -----------------\n  // UNQUANTIZE QUINTS\n  // -----------------\n  var cacheDecodeQuints = new Uint8Array(256 * 5 * 6);\n  for (var bitValue = 0; bitValue < 256; ++bitValue) {\n    for (var quint = 0; quint < 5; ++quint) {\n      for (var bitLength = 0; bitLength < 6; ++bitLength) {\n\n        var C = 0;\n        var B = 0;\n        var result;\n        switch (bitLength) {\n          case 1:\n            C = 113;\n            break;\n          case 2:\n            C = 54;\n            // b0000bb00\n            var bBit = (bitValue >> 1) & 1;\n            B = (bBit << 8) | (bBit << 3) | (bBit << 2);\n            break;\n          case 3:\n            C = 26;\n            // cb0000cbc\n            var cbBit = (bitValue >> 1) & 3;\n            B = (cbBit << 7) | (cbBit << 1) | (cbBit >> 1);\n            break;\n          case 4:\n            C = 13;\n            // dcb0000dc\n            var dcbBit = (bitValue >> 1) & 7;\n            B = (dcbBit << 6) | (dcbBit >> 1);\n            break;\n          case 5:\n            C = 6;\n            // edcb0000e\n            var edcbBit = (bitValue >> 1) & 0xF;\n            B = (edcbBit << 5) | (edcbBit >> 3);\n            break;\n        }\n\n        if (bitLength > 0) {\n          var A = bitValue % 2 ? 511 : 0;\n          result = (quint * C + B) >>> 0;\n          result ^= A;\n          result = (A & 0x80) | (result >> 2);\n        }\n\n        cacheDecodeQuints[bitLength + quint * 6 + bitValue * 30] = result;\n      }\n    }\n  }\n\n\n  // TOTO module exports\n  module.exports = {\n    cacheUnquantizeSimple: cacheUnquantizeSimple,\n    cacheUnquantizeTrits: cacheUnquantizeTrits,\n    cacheUnquantizeQuints: cacheUnquantizeQuints,\n    cacheDecodeSimple: cacheDecodeSimple,\n    cacheDecodeTrits: cacheDecodeTrits,\n    cacheDecodeQuints: cacheDecodeQuints\n  };\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n  'use strict';\n\n  /**\n   * Creates a binary mask between two given bounds\n   * @param  {int} a starting bit\n   * @param  {int} b ending bit\n   * @return {int} mask integer containing binary 1 between a and b\n   */\n  var createMask = function(a, b) {\n    var r = 0;\n    for (var i = a; i <= b; ++i)\n      r |= 1 << i;\n\n    return r;\n  };\n\n  /**\n   * Applies the Hamming weight algorithm: looks for the number of bits set to 1\n   * @param  {int} value\n   * @return {int} the number of bits set to 1\n   */\n  var popCount = function(value) {\n    var i = 0;\n    for (; value; ++i)\n      value &= value - 1;\n    return i;\n  };\n\n  /**\n   * Extracts bits from a bounded range\n   * @param  {int} value representing the integer value where the bits are extracted\n   * @param  {int} start the index of the starting bit\n   * @param  {int} stop  the index of the ending bit\n   * @return {int} the integer composed by the extracted bits\n   */\n  var extractBits = function(value, start, stop) {\n    return (value & createMask(start, stop)) >> start;\n  };\n\n\n  /**\n   * Replicates the n lower bits until the given bit index\n   * @param  {int} val contains the bits to replicate\n   * @param  {int} bitsNb describes the number of lower bits to replicate\n   * @param  {int} endBit the \"index\" of the included final bit\n   * @return {int} result containing a number made of the replicated bits\n   */\n  var replicateBits = function(val, bitsNb, endBit) {\n    // Extracts the bitsNb lower bits from the val value\n    var extractedBits = val & ((1 << bitsNb) - 1);\n    var result = extractedBits;\n    var resultLength = bitsNb;\n\n    while (resultLength < endBit) {\n\n      var extractedBitsShift = 0;\n      if (bitsNb > endBit - resultLength) {\n        var newShift = endBit - resultLength;\n        extractedBitsShift = bitsNb - newShift;\n        bitsNb = newShift;\n      }\n\n      // Shifts the result to \"add\" the pattern\n      result <<= bitsNb;\n      result |= extractedBits >> extractedBitsShift;\n      resultLength += bitsNb;\n    }\n\n    return result;\n  };\n\n  /**\n   * Transfers one bit from an integer to another\n   * @param  {array} array containing the two cells to transfer\n   * @param  {uint} i1 the index of the first cell\n   * @param  {uint} i2 the index of the second cell\n   */\n  var bitTransferSigned = function(array, i1, i2) {\n    var a = array[i1];\n    var b = array[i2];\n\n    b >>= 1;\n    b |= a & 0x80;\n    a >>= 1;\n    a &= 0x3F;\n    if (a & 0x20)\n      a -= 0x40;\n\n    array[i1] = a;\n    array[i2] = b;\n  };\n\n  /**\n   * Reads at most 30 bits from the given U8Int array\n   * @param  {U8IntArray} u8buffer buffer containing data to read\n   * @param  {int} beginByteId first byte at which the reading should begin\n   * @param  {int} bitsOffset nth bits at which the reading should begin\n   * @param  {int} bitsNb number of bits to read\n   * @return {int} an integer containing the read bits\n   */\n  var readBits = function(u8buffer, beginByteId, bitsOffset, bitsNb) {\n    if (bitsNb > 30)\n      console.error('The reader can not read more than 30 bits in a row.');\n    if (bitsNb <= 0)\n      return 0;\n\n    // Updates the total number of extracted bits\n    // for the current block\n    //bitsReadCount += bitsNb;\n\n    var bitsReadResult = 0;\n    var offsetByteId = beginByteId + Math.floor(bitsOffset / 8);\n    var endByteId = beginByteId + Math.floor((bitsOffset + bitsNb) / 8);\n    var bornInfBit = bitsOffset % 8;\n    var bornSupBit = (bitsOffset + bitsNb - 1) % 8;\n\n    // Simple reading where data lies on the same byte\n    if (offsetByteId === endByteId)\n      return (u8buffer[offsetByteId] & createMask(bornInfBit, bornSupBit)) >> bornInfBit;\n\n    // Recreates the integer by shifting bytes\n    // the created integer is at most a 24bits integer\n    var shift = 8;\n    bitsReadResult += u8buffer[offsetByteId];\n    for (var i = offsetByteId + 1; i <= endByteId; ++i) {\n      bitsReadResult += u8buffer[i] << shift;\n      shift *= 2;\n    }\n\n    bitsReadResult = (bitsReadResult & createMask(bornInfBit, bornInfBit + bitsNb - 1)) >> bornInfBit;\n\n    return bitsReadResult;\n  };\n\n  /**\n   * Write a given value in colorEndpointData at the byte index\n   * computed from the number of bits currently written.\n   * It is important to note that the number of bits to write in\n   * a row never exceed the size of a byte (8 bits)\n   * @param  {Uint8Array} colorEndpointData destination byte array\n   * @param  {int} bits the value to write\n   * @param  {uint} bitsNb the number of bits to write\n   * @param  {uint} bitsWritten the current number of bits written\n   */\n  var writeBits = function(colorEndpointData, bits, bitsNb, bitsWritten) {\n    colorEndpointData[Math.floor(bitsWritten / 8)] = bits;\n  };\n\n  /**\n   * Reverses the bits in a byte\n   * @param  {uint8} b the byte to reverse\n   * @return {uint32} the reversed byte not casted\n   */\n  var reverseByte = function(b) {\n    // Converts x to a 32 bits unsigned integer\n    b = b >>> 0;\n    return ((b * 0x0802 & 0x22110) | (b * 0x8020 & 0x88440)) * 0x10101 >> 16;\n  };\n\n  /**\n   * Reverses each byte just as the global bytes order\n   * @param  {Uint8Array} u8array the array to reverse\n   */\n  var reverseU8Array = function(u8array) {\n    for (var i = 0; i < u8array.length / 2; ++i) {\n      var a = reverseByte(u8array[i]);\n      var b = reverseByte(u8array[u8array.length - 1 - i]);\n\n      u8array[i] = b;\n      u8array[u8array.length - 1 - i] = a;\n    }\n  };\n\n  module.exports = {\n    popCount: popCount,\n    readBits: readBits,\n    writeBits: writeBits,\n    extractBits: extractBits,\n    replicateBits: replicateBits,\n    bitTransferSigned: bitTransferSigned,\n    reverseU8Array: reverseU8Array\n  };\n\n/***/ }\n/******/ ])\n});\n;"}}]);